<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
xmlns="http://www.w3.org/1999/xhtml"
xmlns:doc="http://www.xqdoc.org/1.0"
xmlns:xs="http://www.w3.org/2001/XMLSchema"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:fn="http://www.w3.org/2005/02/xpath-functions"
xmlns:map="http://marklogic.com/map"
exclude-result-prefixes="xs doc fn map"
version="2.0">

<xsl:output method="html" indent="yes" encoding="UTF-8"/>
<xsl:strip-space elements="*"/>
<xsl:param name="location" as="xs:string?"/>
<xsl:param name="source" as="xs:string?"/>
<xsl:param name="showCode" as="xs:boolean" select="false()"/>
<xsl:param name="showVars" as="xs:boolean" select="false()"/>
  <!-- generate module html //-->
  <xsl:template match="//doc:xqdoc">
	<div id="api-main">
    <xsl:apply-templates/>
    <div>
      <h3>Original Source Code</h3>
      <pre class="prettyprint lang-xq"><xsl:value-of select="$source"/></pre>
    </div>
    <br/>
    <div class="footer"><p style="text-align:right"><i><xsl:value-of select="()"/></i> |
    generated by xquerydoc <a  href="https://github.com/xquery/xquerydoc" target="xquerydoc">https://github.com/xquery/xquerydoc</a></p></div>
	</div>
  <script type="application/javascript">
	  window.onload = function(){ prettyPrint(); }
	</script>  
  </xsl:template>

  <xsl:template match="doc:module">
    <h4><span class="icon-cog"></span><xsl:value-of select="doc:uri"/></h4>
    <xsl:choose>
         <xsl:when test="@type = 'library'">
          <code xml:space="preserve">
            import module namespace <xsl:value-of select="@prefix"/> = "<xsl:value-of select="doc:uri"/>"
                at "/<xsl:value-of select="$location"/>";
          </code>
        </xsl:when>
        <xsl:otherwise>
          <code xml:space="preserve">
          xdmp:invoke("/<xsl:value-of select="$location"/>");
          </code>
        </xsl:otherwise>
    </xsl:choose>
    <hr/>
    <xsl:apply-templates select="*[not(name(.) eq 'doc:uri')]"/>
  </xsl:template>

  <xsl:template match="doc:variables">
    <xsl:if  test="showVars">
        <div id="variables">
        <h4>Variables</h4>
        <xsl:apply-templates/>
        </div>
    </xsl:if>
  </xsl:template>

  <xsl:template match="doc:variable[@private]"/>
  
  <xsl:template match="doc:variable">
    <div id="{ concat('var_', replace(doc:name, ':', '_')) }">
      <h4><pre class="prettyprint lang-xq"><u>Variable</u>:&#160;$<xsl:value-of select="(doc:name,doc:uri)[1]"/> as <xsl:value-of select="(doc:type,'item()*')[1]"/><xsl:value-of select="doc:type/@occurrence"/></pre></h4>
      <xsl:apply-templates select="doc:comment"/>
    </div>
  </xsl:template>

  <xsl:template match="doc:uri">
    <xsl:value-of select="."/>
  </xsl:template>

  <xsl:template match="doc:functions">
    <div id="functions">
      <h4>Functions</h4>
      <xsl:apply-templates/>
    </div>
  </xsl:template>

  <xsl:template match="doc:function[@private]"/>

  <xsl:template match="doc:function">
    <div id="{ concat('func_', replace(doc:name, ':', '_'), '_', @arity) }" class="function">
      <h4 class="function-name"><xsl:value-of select="doc:name"/></h4>
      <pre class="prettyprint lang-xq">function <b class="function-name"><xsl:value-of select="doc:name"/></b><xsl:value-of select="doc:signature"/></pre>
      <xsl:apply-templates select="* except (doc:name|doc:signature|doc:source)"/>
      <xsl:apply-templates select="doc:source"/>
      
      <xsl:apply-templates select="doc:comment/doc:error"/>
    </div>
  </xsl:template>

  <xsl:template match="doc:parameters">
    <h5>Parameters:</h5>
    <ul class="nav">
      <xsl:apply-templates/>
    </ul>
  </xsl:template>

  <xsl:template match="doc:parameter">
    <li>
      <strong>$<xsl:value-of select="doc:name"/></strong> as <xsl:value-of select="(doc:type,'item()*')[1]"/><strong><xsl:value-of select="doc:type/@occurrence"/></strong>
      <xsl:variable name="name" select="string(doc:name)"/>
      <xsl:for-each select="../../doc:comment/doc:param[starts-with(normalize-space(.), $name) or starts-with(normalize-space(.), concat('$',$name))]">
        <xsl:value-of select="substring-after(normalize-space(.), $name)"/>
      </xsl:for-each>
    </li>
  </xsl:template>

  <xsl:template match="doc:return">
    <h5>Returns</h5>
    <ul><li>
      <xsl:value-of select="doc:type"/><xsl:value-of select="doc:type/@occurrence"/>
      <xsl:for-each select="../doc:comment/doc:return">
        <xsl:text>: </xsl:text>
        <xsl:value-of select="normalize-space(.)"/>
      </xsl:for-each>
    </li></ul>
  </xsl:template>
  <xsl:template match="doc:source">
    <xsl:if test="showCode">
    <div class="function-source">
      <pre class="prettyprint" xml:space="preserve"><xsl:value-of select="."/></pre>
    </div>
  </xsl:if>
  </xsl:template>
  <xsl:template match="doc:source_old">
    <h6>Source:</h6>
    <div class="source"> 
      <pre class="prettyprint" xml:space="preserve"><xsl:value-of select="."/></pre>
    </div>
  </xsl:template>
  <xsl:template match="doc:error" mode="custom"/>

  <xsl:template match="doc:error">
    <h5>Errors</h5>
    <p>
      <xsl:apply-templates mode="custom"/>
    </p>
  </xsl:template>

  <xsl:template match="doc:comment">
    <xsl:apply-templates mode="custom"/>
  </xsl:template>

  <xsl:template match="doc:description" mode="custom">
    <p><xsl:apply-templates mode="custom"/></p>
  </xsl:template>

  <xsl:template match="*:h1" mode="custom">
    <h1><xsl:apply-templates mode="custom"/></h1>
  </xsl:template>

  <xsl:template match="*:ul" mode="custom">
    <ul><xsl:apply-templates mode="custom"/></ul>
  </xsl:template>

  <xsl:template match="*:li" mode="custom">
    <li><xsl:apply-templates mode="custom"/></li>
  </xsl:template>

  <xsl:template match="*:p" mode="custom">
    <p><xsl:apply-templates mode="custom"/></p>
  </xsl:template>

  <xsl:template match="*:pre" mode="custom">
     <pre class="prettyprint lang-xq"><xsl:value-of select="."/></pre>
  </xsl:template>

  <xsl:template match="doc:author" mode="custom #default">
    <p>Author: <xsl:value-of select="."/></p>
  </xsl:template>

  <xsl:template match="doc:version" mode="custom #default">
    <p>Version: <xsl:value-of select="."/></p>
  </xsl:template>

  <xsl:template match="doc:see" mode="custom">
    See also:
    <xsl:for-each select="tokenize(.,'[ \t\r\n,]+')[. ne '']">
      <xsl:if test="position() ne 1"><xsl:text>, </xsl:text></xsl:if>
      <xsl:choose>
        <xsl:when test="contains(.,'#')">
          <a href="#{ concat('func_', replace(substring-before(.,'#'), ':', '_'),
            '_', substring-after(.,'#')) }">
            <xsl:value-of select="."/>
          </a>
        </xsl:when>
        <xsl:when test="starts-with(.,'$')">
          <a href="#{ concat('var_', replace(substring-after(.,'$'), ':', '_')) }">
            <xsl:value-of select="."/>
          </a>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="."/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:for-each>
  </xsl:template>

  <xsl:template match="doc:param" mode="custom"/>
  <xsl:template match="doc:return" mode="custom"/>

  <!--xsl:template match="doc:custom" mode="custom">
    <xsl:apply-templates select="."/>
  </xsl:template>

  <xsl:template match="doc:param" mode="custom">
    <xsl:apply-templates select="."/>
  </xsl:template>


  <xsl:template match="doc:version" mode="custom">
    <xsl:apply-templates select="."/>
  </xsl:template-->

  <xsl:template match="doc:control"/>

  <xsl:template match="text()" mode="custom #default">
    <xsl:value-of select="normalize-space(.)"/>
  </xsl:template>

</xsl:stylesheet>
